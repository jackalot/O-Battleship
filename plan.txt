Focus: Stop the player from attacking if its not their turn:
* in updateDomBoard.js
- in unconfirmedAttack (){
 - before any other previous attacks are queryselected, check if myPlayer.playerTurn equals 0
 {
     - then continue the function.
 }
}
* in attackDomManager.js
- in swapVisibility()
{
    - if defendingPlayer is equal to player1 {
        -call the player1.swapTurn() function
        -call the player2.swapTurn() function
    }
    - if defendingPlayer is equal to player2 {
        -call the player2.swapTurn() function
        -call the player1.swapTurn() function
    }
}
psuedo code:
/// updateDomBoard.js \\\
 function unconfirmedAttack(temporaryBox) {
     if(myPlayer.playerTurn === 0)
     {
        // in the case this function is called more than once, get all cases of the class
        const anyPreviousAttacks = document.querySelectorAll('.unconfirmedAttack');
        // if there isn't any, move on
        if (anyPreviousAttacks.length === 0) {
        console.log(temporaryBox);
        temporaryBox.classList.add('unconfirmedAttack');
        const gameStatus = document.querySelector('.gameStatus');
        gameStatus.textContent = `${otherPlayer.playerName}, please confirm attack`;
        } else { // remove the last unconfirmed attacks, then continue out
        anyPreviousAttacks.forEach((element) => {
            element.classList.remove('unconfirmedAttack');
        });
        temporaryBox.classList.add('unconfirmedAttack');
        const gameStatus = document.querySelector('.gameStatus');
        gameStatus.textContent = `${otherPlayer.playerName}, please confirm attack`;
        }
     }
  }
  function swapVisibility(defendingPlayer) {
    if (defendingPlayer === player1) {
      player1.swapTurn();
      player2.swapTurn();
      p1DomBoardManager.swapHideShips();
      p2DomBoardManager.swapHideShips();
      p1DomBoardManager.sendNextCollumn();
      p2DomBoardManager.sendNextCollumn();
    } else if (defendingPlayer === player2) {
      player2.swapTurn();
      player1.swapTurn();
      p2DomBoardManager.swapHideShips();
      p1DomBoardManager.swapHideShips();
      p2DomBoardManager.sendNextCollumn();
      p1DomBoardManager.sendNextCollumn();
    }
  }
/// attackDomManager.js \\\