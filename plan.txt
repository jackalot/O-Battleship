Focus: make the cpu be able to attack corresponding grid items when a hit is found:
* inside player.js
{
  + inside player.js, a new function called findHits() {
    + parameters { playerAttacking }
    + start off the function with an empty array called 'hitsFound'
    + check if playerAttacking's board's hitOrMissedCoords is not empty {
      + make a for loop that goes through the playerAttacking's board's hitOrMissedCoords
      {
        + if a coordinate with the coord type 'Hit' is found {
          + push it onto hitsFound
        }
      }
    }
  }
  + inside the function sendRandomAttack() {
    - remove all the code from the line: the x reference down to the console.log();
  }
}
psuedo code:
function sendRandomAttack(playerAttacking) {
    let x = Math.floor(Math.random() * playerAttacking.ourBoard.topRightCorner.x);
    let y = Math.floor(Math.random() * playerAttacking.ourBoard.topRightCorner.y);
    // so x is never out of bounds
    if (x < playerAttacking.ourBoard.bottomLeftCorner.x) {
      x += 1;
    }
    if (y < playerAttacking.ourBoard.bottomLeftCorner.y) {
      y += 1;
    }
    const coordinates = { x, y };
    console.log(coordinates);
    const fitsBoard = playerAttacking.ourBoard.checkValidCoord(coordinates);
    if (fitsBoard === true) {
      // check if these coordinates on the boord have a miss or hit checked already.
      const openCoordinate = playerAttacking.ourBoard.checkAvailableCoord(coordinates);
      if (openCoordinate === true) {
        sendAttack(playerAttacking, coordinates);
      }
      return openCoordinate;
    }
    return false;
  }