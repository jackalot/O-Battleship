Focus: test the sinking function of ship.js and similar:
* first re-arrange all the tests in ship.js so that they are organize
- put all mock ships at the top of the file
- mention each mock ships orientation 
- add a comment as a divider to state the next group of tests which will be,
this group is going to be the 'toMatchObject' group where ships just return themselves
- paste all the toMatchObject tests where the ships return an toMatchObject
- add a comment as a divider to state the next group of tests which will be,
this group will be the length Measurer group
/ repeat this for each test
psuedo code:

const shipFile = require('./ship');
const { TestWatcher } = require("jest");
// vertical
const mockShip = shipFile(coord1 = {x: 1, y: 1}, coord2 = {x: 1, y: 7});
// vertical
const mockShip2 = shipFile(coord1 = {x: 9, y: 3}, coord2 = { x: 9, y: 9});
// horiztonal
const horizontalShip = shipFile(coord1 = {x: 3, y: 3}, coord2 = { x: 9, y: 3});
// horizontal
// Made to test the outer limit of the board
const mockShip3 = shipFile(coord1 = {x: 1, y: 10}, coord2 = { x: 10, y: 10});
// vertical
// Made to test the outer limit of the board
const mockShip4 = shipFile(coord1 = {x: 10, y: 1}, coord2 = { x: 10, y: 10});
/*
    The following tests are tests that return the ship as an object,
    they will return the ship's coordinates, and it's functions.
    For the test's, they only test the coordinate's returning.
*/
test("mockShip returns an object", () => {
    expect(mockShip).toMatchObject({ coord1: {x: 1, y: 1}, coord2: {x: 1, y: 7} });
})
test("mockShip2 returns an object", () => {
    expect(mockShip2).toMatchObject({ coord1: {x: 9, y: 3}, coord2: {x: 9, y: 9} })
})
test("horizontalShip returns an object", () => {
    expect(horizontalShip).toMatchObject({ coord1: {x: 3, y: 3}, coord2: {x: 9, y: 3} });
})
test("mockShip3 returns an object", () => {
    expect(mockShip3).toMatchObject({ coord1: {x: 1, y: 10}, coord2: { x: 10, y: 10} });
})
test("mockShip4 returns an object", () => {
    expect(mockShip4).toMatchObject({ coord1: {x: 10, y: 1}, coord2: { x: 10, y: 10} });
})
/*
    The following tests are tests that check to see how long the ship
    is, it's the lengthMeasurer test. It will only return the length
    according to the orientation of the ship.
*/
test("mockShip returns a length of 6", () => {
    expect(mockShip.lengthMeasurer(coord1 = {x: 1, y: 1}, coord2 = {x: 1, y: 7})).toBe(6);
})
test("mockShip2 returns a length of 6", () => {
    expect(mockShip2.lengthMeasurer(coord1 = {x: 9, y: 3}, coord2 = { x: 9, y: 9})).toBe(6);
})
test("horizontalShip returns a length of 6", () => {
    expect(horizontalShip.lengthMeasurer(coord1 = {x: 3, y: 3}, coord2 = {x: 9, y: 3})).toBe(6);
})
test("mockShip3 returns a length of 9", () => {
    expect(mockShip3.lengthMeasurer(coord1 = {x: 1, y: 10}, coord2 = { x: 10, y: 10})).toBe(9);
})
test("mockShip4 returns a length of 9", () => {
    expect(mockShip4.lengthMeasurer(coord1 = {x: 10, y: 1}, coord2 = { x: 10, y: 10})).toBe(9);
})
/*
    The following tests are hit() tests but at the beginning of the
    ship, for example, like at 9, 3 for mockShip2. This is to see if,
    at the bare start, we can get hit.
*/
test("mockShip will get hit at [1, 1]", () => {
    expect(mockShip.hit({x: 1, y: 1})).toBe(true);
})
test("mockShip2 will get hit at [9, 3]", () => {
    expect(mockShip2.hit({x: 9, y: 3})).toBe(true);
})
test("horizontalShip will get hit at [3, 3]", () => {
    expect(horizontalShip.hit({x: 3, y: 3})).toBe(true);
})
test("mockShip3 will get hit at [1, 10]", () => {
    expect(mockShip3.hit({x: 1, y: 10})).toBe(true);
})
test("mockShip4 will get hit at [10, 1]", () => {
    expect(mockShip4.hit({x: 10, y: 1})).toBe(true);
})
/*
    The following tests are hit() tests but at the mid point or 
    somewhere between the end points of the ship, like at 9, 6
    of mockShip2 for example. This is if to see if, at any point
    on the ship, we can get hit.
*/
test("mockShip will get hit at [1, 4]", () => {
    expect(mockShip.hit({x: 1, y: 4})).toBe(true);
})
test("mockShip2 will get hit at [9, 6]", () => {
    expect(mockShip2.hit({x: 9, y: 6})).toBe(true);
})
test("horizontalShip will get hit at [6, 3]", () => {
    expect(horizontalShip.hit({x: 6, y: 3})).toBe(true);
})
test("mockShip3 will get hit at [5, 10]", () => {
    expect(mockShip3.hit({x: 5, y: 10})).toBe(true);
})
test("mockShip4 will get hit at [10, 5]", () => {
    expect(mockShip4.hit({x: 10, y: 5})).toBe(true);
})
/*
    The following tests are hit() tests but at the end of the ship,
    for example, like at 9, 9 of mockShip2. This is if to see if,
    at the very end, we can get hit.
*/
test("mockShip will get hit at [1, 7]", () => {
    expect(mockShip.hit({x: 1, y: 7})).toBe(true);
})
test("mockShip2 will get hit at [9, 9]", () => {
    expect(mockShip2.hit({x: 9, y: 9})).toBe(true);
})
test("horizontalShip will get hit at [9, 3]", () => {
    expect(horizontalShip.hit({x: 9, y: 3})).toBe(true);
})
test("mockShip3 will get hit at [10, 10]", () => {
    expect(mockShip3.hit({x: 10, y: 10})).toBe(true);
})
test("mockShip4 will get hit at [10, 10]", () => {
    expect(mockShip4.hit({x: 10, y: 10})).toBe(true);
})
test("mockShip.shipParts will return every part", () => {
    expect(mockShip.shipParts()).toEqual([
    {"hasSunk": false, "partCoordinates": {"x": 1, "y": 1}},
     {"hasSunk": false, "partCoordinates": {"x": 1, "y": 2}},
     {"hasSunk": false, "partCoordinates": {"x": 1, "y": 3}},
      {"hasSunk": false, "partCoordinates": {"x": 1, "y": 4}},
       {"hasSunk": false, "partCoordinates": {"x": 1, "y": 5}},
       {"hasSunk": false, "partCoordinates": {"x": 1, "y": 6}}, 
       {"hasSunk": false, "partCoordinates": {"x": 1, "y": 7}}]    );
})
test("mockShip2.shipParts will return every part", () => {
    expect(mockShip2.shipParts()).toEqual([
    {"hasSunk": false, "partCoordinates": {"x": 9, "y": 3}},
    {"hasSunk": false, "partCoordinates": {"x": 9, "y": 4}},
    {"hasSunk": false, "partCoordinates": {"x": 9, "y": 5}},
    {"hasSunk": false, "partCoordinates": {"x": 9, "y": 6}},
    {"hasSunk": false, "partCoordinates": {"x": 9, "y": 7}},
    {"hasSunk": false, "partCoordinates": {"x": 9, "y": 8}},
    {"hasSunk": false, "partCoordinates": {"x": 9, "y": 9}}]    );
})
test("mockShip will not sink", () => {
    expect(mockShip.sink()).toBe('I still have parts left');
})
test("mockShip2 will not sink", () => {
    expect(mockShip2.sink()).toBe('I still have parts left');
})
test("mockShip will return all of its coordinates, including the parts", () => {
    expect(mockShip.getAllCoordinates()).toMatchObject([
        {x:1,y:1},{x:1,y:2},
        {x:1,y:3},{x:1,y:4},
        {x:1,y:5},{x:1,y:6},
        {x:1,y:7}
    ])
})
test("mockShip2 will return all of its coordinates, including the parts", ()=> {
    expect(mockShip2.getAllCoordinates()).toMatchObject([
        {x: 9, y: 3}, {x: 9, y: 4},
        {x: 9, y: 5}, {x: 9, y: 6},
        {x: 9, y: 7}, {x: 9, y: 8},
        {x: 9, y: 9}
    ])
})
test("horizontalShip will not get hit at [9, 4]", () => {
    expect(horizontalShip.hit({x: 9, y: 4})).toBe(false);
})
test("horizontalShip.shipParts will return every part", () => {
    expect(horizontalShip.shipParts()).toEqual([
    {"hasSunk": false, "partCoordinates": {"x": 3, "y": 3}},
     {"hasSunk": false, "partCoordinates": {"x": 4, "y": 3}},
     {"hasSunk": false, "partCoordinates": {"x": 5, "y": 3}},
      {"hasSunk": false, "partCoordinates": {"x": 6, "y": 3}},
       {"hasSunk": false, "partCoordinates": {"x": 7, "y": 3}},
       {"hasSunk": false, "partCoordinates": {"x": 8, "y": 3}}, 
       {"hasSunk": false, "partCoordinates": {"x": 9, "y": 3}}]    );
})
test("horizontalShip will not sink", () => {
    expect(horizontalShip.sink()).toBe('I still have parts left');
})
test("horizontalShip will return all of its coordinates, including the parts", () => {
    expect(horizontalShip.getAllCoordinates()).toMatchObject([
        {x:3,y:3},{x:4,y:3},
        {x:5,y:3},{x:6,y:3},
        {x:7,y:3},{x:8,y:3},
        {x:9,y:3}
    ])
})

test("mockShip3 will not get hit at [2, 5]", () => {
    expect(mockShip3.hit({x: 2, y: 5})).toBe(false);
})
test("mockShip4 will not get hit at [2, 5]", () => {
    expect(mockShip4.hit({x: 2, y: 5})).toBe(false);
})
test("mockShip3.shipParts will return every part", () => {
    expect(mockShip3.shipParts()).toEqual([
    {"hasSunk": false, "partCoordinates": {"x": 1, "y": 10}},
     {"hasSunk": false, "partCoordinates": {"x": 2, "y": 10}},
     {"hasSunk": false, "partCoordinates": {"x": 3, "y": 10}},
      {"hasSunk": false, "partCoordinates": {"x": 4, "y": 10}},
       {"hasSunk": false, "partCoordinates": {"x": 5, "y": 10}},
       {"hasSunk": false, "partCoordinates": {"x": 6, "y": 10}}, 
       {"hasSunk": false, "partCoordinates": {"x": 7, "y": 10}},
       {"hasSunk": false, "partCoordinates": {"x": 8, "y": 10}},
       {"hasSunk": false, "partCoordinates": {"x": 9, "y": 10}},
       {"hasSunk": false, "partCoordinates": {"x": 10, "y": 10}}]    );
})
test("mockShip4.shipParts will return every part", () => {
    expect(mockShip4.shipParts()).toEqual([
    {"hasSunk": false, "partCoordinates": {"x": 10, "y": 1}},
     {"hasSunk": false, "partCoordinates": {"x": 10, "y": 2}},
     {"hasSunk": false, "partCoordinates": {"x": 10, "y": 3}},
      {"hasSunk": false, "partCoordinates": {"x": 10, "y": 4}},
       {"hasSunk": false, "partCoordinates": {"x": 10, "y": 5}},
       {"hasSunk": false, "partCoordinates": {"x": 10, "y": 6}}, 
       {"hasSunk": false, "partCoordinates": {"x": 10, "y": 7}},
       {"hasSunk": false, "partCoordinates": {"x": 10, "y": 8}},
       {"hasSunk": false, "partCoordinates": {"x": 10, "y": 9}},
       {"hasSunk": false, "partCoordinates": {"x": 10, "y": 10}}]    );
})
test("mockShip3 will not sink", () => {
    expect(horizontalShip.sink()).toBe('I still have parts left');
})
test("mockShip4 will not sink", () => {
    expect(mockShip4.sink()).toBe('I still have parts left');
})
test("mockShip3 will return all of its coordinates, including the parts", () => {
    expect(mockShip3.getAllCoordinates()).toMatchObject([
        {x:1,y:10}, {x:2,y:10},
        {x:3,y:10}, {x:4,y:10},
        {x:5,y:10}, {x:6,y:10},
        {x:7,y:10}, {x:8,y:10},
        {x:9,y:10}, {x:10,y:10},
    ])
})
test("mockShip4 will return all of its coordinates, including the parts", () => {
    expect(mockShip4.getAllCoordinates()).toMatchObject([
        {x:10,y:1}, {x:10,y:2},
        {x:10,y:3}, {x:10,y:4},
        {x:10,y:5}, {x:10,y:6},
        {x:10,y:7}, {x:10,y:8},
        {x:10,y:9}, {x:10,y:10},
    ])
})
/*
Misses tests
Coordinates of ships
- mockShip: coord1 = {x: 1, y: 1}, coord2 = {x: 1, y: 7}
- mockShip2: coord1 = {x: 9, y: 3}, coord2 = { x: 9, y: 9}
- horizontalShip: coord1 = {x: 3, y: 3}, coord2 = { x: 9, y: 3}
- mockShip3: coord1 = {x: 1, y: 10}, coord2 = { x: 10, y: 10}
- mockShip4: coord1 = {x: 10, y: 1}, coord2 = { x: 10, y: 10}
*/
// mockShip miss tests \\
// Random coordinate
test("mockShip will not get hit at [9, 6]", () => {
    expect(mockShip.hit({x: 9, y: 6})).toBe(false);
})
// close to ship
test("mockShip will not get hit at [2, 2]", () => {
    expect(mockShip.hit({x: 2, y: 2})).toBe(false);
})
// one off the ship
test("mockShip will not get hit at [1, 8]", () => {
    expect(mockShip.hit({x: 1, y: 8})).toBe(false);
})
// mockShip2 tests \\
// random coordinate
test("mockShip2 will not get hit at [1, 8]", () => {
    expect(mockShip2.hit({x: 1, y: 8})).toBe(false);
})
// close to ship
test("mockShip2 will not get hit at [10, 3]", () => {
    expect(mockShip2.hit({x: 10, y: 3})).toBe(false);
})
// one off the ship
test("mockShip2 will not get hit at [9, 10]", () => {
    expect(mockShip2.hit({x: 9, y: 10})).toBe(false);
})
// horizontalShip miss tests \\
// random coordinate \\
test("horizontalShip will not get hit at [7, 2]", () => {
    expect(horizontalShip.hit({x: 7, y: 2})).toBe(false);
})
// close to ship
test("horizontalShip will not get hit at [8, 5]", () => {
    expect(mockShip.hit({x: 8, y: 5})).toBe(false);
})
// one off the ship
test("horizontalShip will not get hit at [9, 4]", () => {
    expect(mockShip.hit({x: 9, y: 4})).toBe(false);
})
// mockShip3 miss tests \\
// random coordinate \\
test("mockShip3 will not get hit at [5, 5]", () => {
    expect(mockShip3.hit({x: 5, y: 5})).toBe(false);
})
// close to the ship \\
test("mockShip3 will not get hit at [8, 9]", () => {
    expect(mockShip3.hit({x: 8, y: 9})).toBe(false);
})
// one off the ship \\
test("mockShip3 will not get hit at [9, 9]", () => {
    expect(mockShip3.hit({x: 9, y: 9})).toBe(false);
})
// mockShip4 miss tests \\
// random coordinate \\
test("mockShip4 will not get hit at [4, 6]", () => {
    expect(mockShip4.hit({x: 4, y: 6})).toBe(false);
})
// close to the ship \\
test("mockShip4 will not get hit at [8, 9]", () => {
    expect(mockShip4.hit({x: 8, y: 9})).toBe(false);
})
// one off the ship \\
test("mockShip4 will not get hit at [9, 9]", () => {
    expect(mockShip4.hit({x: 9, y: 9})).toBe(false);
})