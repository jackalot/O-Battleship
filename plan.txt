Focus: Make the board allow attacks and misses:
- in updateDOMBoard, it will now have a new paramater called attackDomManager
- in updateDomBoard.checkBox, each result will have the click event uncommented.
- each applyClickEvent and removeClickEvent will apply the recieveDomAttack function of attackDomManager
- We will have a new function called attackDomManager ( parameters being player1, p1DomBoardManager, player2, p2DomBoardManager)
{
- inside, there will be a function called 'recieveDomAttack'(coordinate, attackingPlayer) {
    - parameters being {coordinates, attackingPlayer (this is the player that sent the attack)}
    - if else statement checking which player is attackingPlayer
    - if attackingPlayer is player1
    {
        - send an attack at player2's ourBoard with the coordinate variable
        - then call p2DomBoardManager.sendNextCollumn();
    }
    - else if attackingPlayer is player2
    {
        - send an attack at player1's ourboard with the coordinate variable
        - then call p1DomBoardManager.sendNextCollumn();
    }
}
- return {
    recieveDomAttack
}
}- export attackDomManager
psuedo code: 
function updateDOMBoard(attackDomManager)
 function checkBox(coordinate, temporaryBox) {
    const hitResult = searchHit(coordinate);
    const missResult = searchMiss(coordinate);
    const shipResult = searchShip(coordinate);
    if (hitResult === true) {
      temporaryBox.classList.add('hit');
      //  The below function requires another function that may not be done yet
      removeClickEvent(temporaryBox, attackDomManager.recieveDomAttack(coordinate, myPlayer));
    } else if (missResult === true) {
      temporaryBox.classList.add('miss');
      //  The below function requires another function that may not be done yet
      removeClickEvent(temporaryBox, attackDomManager.recieveDomAttack(coordinate, myPlayer));
    } else if (shipResult === true) {
      temporaryBox.classList.add('containsShip');
      //  The below function requires another function that may not be done yet
      applyClickEvent(temporaryBox, attackDomManager.recieveDomAttack(coordinate, myPlayer));
    } else if (hitResult === false && missResult === false && shipResult === false) {
      applyClickEvent(temporaryBox, attackDomManager.recieveDomAttack(coordinate, myPlayer));
      // console.log('this would be a empty effect but there is nothing for it yet, coordinate:');
      // console.log(coordinate);
    }
  }
  //This on is the attackDomManager psuedoCode
  //    Manages all the attacks sent via clicking on the boards, whether that be player1
  //    or player2 
function attackDomManager(player1, p1DomBoardManager, player2, p2DomBoardManager)
{
    function recieveDomAttack( coordinate, attackingPlayer)
    {
        if(attackingPlayer === player1)
        {
            player2.ourboard.recieveAttack(coordinate);
            p2DomBoardManager.sendNextCollumn();
        }
        else if(attackingPlayer === player2)
        {
            player1.ourboard.recieveAttack(coordinate);
            p1DomBoardManager.sendNextCollumn();
        }
    }
    return {
        recieveDomAttack, 
    }
}
module.exports = updateDOMBoard;