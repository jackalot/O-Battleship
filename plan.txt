Focus: after an attack is confirmed, the visible boards will swap:
* updateDomBoard.js
// attackDomManager.swapVisibility() helperFunction()
- inside updateDomBoard, a new function called swapHideShips()
{
   - if hideShips is true, make it false
   - if its false make it true
}
* attackDomManager.js
- inside attackDomManager, a new function called swapVisibility()
{
    - parameters { defendingPlayer }
    - first, it checks if defendingPlayer is player1 {
        - call p1DomBoardManager.swapHideShips();
        - call p2DomBoardManager.swapHideShips();
        - update the board by then calling p1DomBoardManager.sendNextCollumn();
        - update the other players board by finally calling p2DomBoardManager.sendNextCollumn();
    }
    - if its not player1 then it checks if its player 2 {
        - call p2DomBoardManager.swapHideShips();
        - call p1DomBoardManager.swapHideShips();
        - update the board by then calling p2DomBoardManager.sendNextCollumn();
        - update the other players board by finally calling p1DomBoardManager.sendNextCollumn();
    }
}
- in the recieveDomAttack () {
- remove the variable result but don't remove the function call to the defending player
- remove the lines from the console.log() to the second if statement.
- call swapVisibility with the argument of defendingPlayer
}
psuedo code:
// updateDomBoard \\
//  attackDomManager.swapVisibility() helperFunction()
//  changes the hideShips variable
function swapHideShips() {
    if(hideShips === true)
    {
        hideShips = false;
    }
    else if(hideShips === false)
    {
        hideShips = true;
    }
}
// attackDomManager \\
// recieveDomAttack() helperFunction
// calls p1DomBoardManager and p2DomBoardManager functions
function swapVisibility(defendingPlayer)
{
    if(defendingPlayer === player1)
    {
        p1DomBoardManager.swapHideShips();
        p2DomBoardManager.swapHideShips();
        p1DomBoardManager.sendNextCollumn();
        p2DomBoardManager.sendNextCollumn();
    }
    else if(defendingPlayer === player2)
    {
        p2DomBoardManager.swapHideShips();
        p1DomBoardManager.swapHideShips();
        p2DomBoardManager.sendNextCollumn();
        p1DomBoardManager.sendNextCollumn();
    }
}
function recieveDomAttack(coordinate, defendingPlayer, domBox) {
    defendingPlayer.ourBoard.recieveAttack(coordinate);
    const gameStatus = document.querySelector('.gameStatus');
    gameStatus.textContent = "Click on a square to attack that board, then click below to confirm you're attack! ";
    swapVisibility(defendingPlayer);
  }