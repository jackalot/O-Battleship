Focus: let players confirm the ship placements:
+* in the dropShip.js file
{ 
  + inside dropShip.js, a new function named findAdjoiningShips()
  {
    // work on this later
  }
  + import findXCoordinate and findYCoordinate from attackDomManager.js,
  make them labeled as helper functions for getShipCoordinates
  + inside dropShip.js, a new function named getShipCoordinates()
  {
    + parameters { allUnconfirmedShips }
    + make an empty array named unconfirmedCoordinates
    + make a forEach loop using the allUnconfirmedShips array {
          + add a reference to findXCoordinate with the ship boxes id as an argument
          + add a reference to findYCoordinate with the ship boxes id as an argument
          + make a coordinate object with a x y key pair using the above references.
          + push that coordinate object to the unconfirmedCoordinates array.
    }
  }
}
psuedo code:
// index.js \\
const confirmPlaceShipsBtn = document.querySelect('.confirm-place-ships');
confirmPlaceShipsBtn.addEventListener('click', dropShip.confirmPlacedShips());
// dropShip.js \\
// getShipCoordinates() helper function
function findXcoordinate(nonSeperatedId) {
    // sort through the loop, if this is 1,
    let hyphenCount = 0;
    // then add the numbers we find this string
    let stringifiedNumbers = '';
    for (let i = 0; i < nonSeperatedId.length; i += 1) {
      // example id: P1Box-10-10
      // when the - after the x is found, add 1 to hyphen count
      if (nonSeperatedId[i] === '-') {
        hyphenCount += 1;
      } else if (hyphenCount === 1) {
        stringifiedNumbers += nonSeperatedId[i];
      }
    }
    // eslint-disable-next-line radix
    const resultParsed = parseInt(stringifiedNumbers);
    return resultParsed;
  }
  //  getShipCoordinates() helper function
   function findYcoordinate(nonSeperatedId) {
    // sort through the loop, if this is 1,
    let hyphenCount = 0;
    // then add the numbers we find this string
    let stringifiedNumbers = '';
    for (let i = 0; i < nonSeperatedId.length; i += 1) {
      // example id: P1Box-10-10
      // when a hyphen is found, add one to hyphen count
      if (nonSeperatedId[i] === '-') {
        hyphenCount += 1;
      } else if (hyphenCount === 2) {
        stringifiedNumbers += nonSeperatedId[i];
      }
    }
    // eslint-disable-next-line radix
    const resultParsed = parseInt(stringifiedNumbers);
    return resultParsed;
  }
function getShipCoordinates(allUnconfirmedShips) {
  const unconfirmedCoords = [];
  allUnconfirmedShips.forEach((ship) => {
    const xResult = findXCoordinate(ship.id);
    const yResult = findYCoordinate(ship.id);
  })
}
function findUnconfirmedShips() {
  const allUnconfirmedShips = document.querySelect('.confirmShip');
  return allUnconfirmedShips;
}
function confirmPlacedShips() {
  const allUnconfirmedShips = findUnconfirmedShips();
}